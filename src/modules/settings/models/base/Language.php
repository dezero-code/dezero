<?php
/**
 * Base Language model class file
 *
 * @author Fabián Ruiz <fabian@dezero.es>
 * @link http://www.dezero.es
 * @copyright Copyright &copy; 2024 Fabián Ruiz
 */

namespace dezero\modules\settings\models\base;

use dezero\modules\settings\models\query\LanguageQuery;
use yii\db\ActiveQueryInterface;
use Yii;

/**
 * DO NOT MODIFY THIS FILE! It is automatically generated by Gii.
 * If any changes are necessary, you must set or override the required
 * property or method in class "dezero\modules\settings\models\Language".
 *
 * Base Language model class for table "language".
 *
 * -------------------------------------------------------------------------
 * COLUMN ATTRIBUTES
 * -------------------------------------------------------------------------
 * @property string $language_id
 * @property string $name
 * @property string $native
 * @property string $prefix
 * @property int $is_ltr_direction
 * @property int $is_default
 * @property int $weight
 * @property int $disabled_date
 * @property int $disabled_user_id
 * @property int $created_date
 * @property int $created_user_id
 * @property int $updated_date
 * @property int $updated_user_id
 * @property string $entity_uuid
 *
 * -------------------------------------------------------------------------
 * RELATIONS
 * -------------------------------------------------------------------------
 * @property User $createdUser
 * @property User $disabledUser
 * @property User $updatedUser
 * @property Category[] $categories
 * @property User[] $users
 */
abstract class Language extends \dezero\entity\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName() : string
    {
        return 'language';
    }


    /**
     * {@inheritdoc}
     */
    public function rules() : array
    {
        return [
            // Typed rules
            'requiredFields' => [['language_id', 'name', 'prefix'], 'required'],
            'integerFields' => [['is_ltr_direction', 'is_default', 'weight', 'disabled_date', 'disabled_user_id', 'created_date', 'created_user_id', 'updated_date', 'updated_user_id'], 'integer'],

            // Max length rules
            'max6' => [['language_id'], 'string', 'max' => 6],
            'max16' => [['prefix'], 'string', 'max' => 16],
            'max36' => [['entity_uuid'], 'string', 'max' => 36],
            'max64' => [['name', 'native'], 'string', 'max' => 64],

            // Default NULL
            'defaultNull' => [['native', 'disabled_date', 'disabled_user_id'], 'default', 'value' => null],

            // UNIQUE rules
            'languageIdUnique' => [['language_id'], 'unique'],
        ];
    }


    /**
     * @return LanguageQuery The ActiveQuery class for this model
     */
    public static function find() : LanguageQuery
    {
        return new LanguageQuery(static::class);
    }


    /**
     * Title used for this model
     */
    public function title() : string
    {
        return $this->language_id;
    }
}

/**
 * These are relations and enum methods generated with Gii.
 * YOU CAN USE THESE METHODS IN THE PARENT MODEL CLASS
 *

   /*
    |--------------------------------------------------------------------------
    | RELATIONS
    |--------------------------------------------------------------------------
    *

    /**
     * @return ActiveQueryInterface The relational query object.
     *
    public function getCreatedUser() : ActiveQueryInterface
    {
        return $this->hasOne(User::class, ['user_id' => 'created_user_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     *
    public function getDisabledUser() : ActiveQueryInterface
    {
        return $this->hasOne(User::class, ['user_id' => 'disabled_user_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     *
    public function getUpdatedUser() : ActiveQueryInterface
    {
        return $this->hasOne(User::class, ['user_id' => 'updated_user_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     *
    public function getCategories() : ActiveQueryInterface
    {
        return $this->hasMany(Category::class, ['language_id' => 'language_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     *
    public function getUsers() : ActiveQueryInterface
    {
        return $this->hasMany(User::class, ['language_id' => 'language_id']);
    }

*/
