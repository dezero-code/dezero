<?php
/**
 * Base EntityFile model class file
 *
 * @author FabiÃ¡n Ruiz <fabian@dezero.es>
 * @link http://www.dezero.es
 * @copyright Copyright &copy; 2024 FabiÃ¡n Ruiz
 */

namespace dezero\modules\entity\models\base;

use dezero\modules\entity\models\query\EntityFileQuery;
use yii\db\ActiveQueryInterface;
use Yii;

/**
 * DO NOT MODIFY THIS FILE! It is automatically generated by Gii.
 * If any changes are necessary, you must set or override the required
 * property or method in class "dezero\modules\entity\models\EntityFile".
 *
 * Base EntityFile model class for table "entity_file".
 *
 * -------------------------------------------------------------------------
 * COLUMN ATTRIBUTES
 * -------------------------------------------------------------------------
 * @property int $entity_file_id
 * @property int $file_id
 * @property string $entity_uuid
 * @property string $entity_type
 * @property int $entity_source_id
 * @property string $relation_type
 * @property int $weight
 * @property int $created_date
 * @property int $created_user_id
 * @property int $updated_date
 * @property int $updated_user_id
 *
 * -------------------------------------------------------------------------
 * RELATIONS
 * -------------------------------------------------------------------------
 * @property User $createdUser
 * @property Entity $entityUu
 * @property AssetFile $file
 * @property User $updatedUser
 */
abstract class EntityFile extends \dezero\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName() : string
    {
        return 'entity_file';
    }


    /**
     * {@inheritdoc}
     */
    public function rules() : array
    {
        return [
            // Typed rules
            'requiredFields' => [['file_id', 'entity_type', 'relation_type'], 'required'],
            'integerFields' => [['file_id', 'entity_source_id', 'weight', 'created_date', 'created_user_id', 'updated_date', 'updated_user_id'], 'integer'],

            // Max length rules
            'max32' => [['relation_type'], 'string', 'max' => 32],
            'max36' => [['entity_uuid'], 'string', 'max' => 36],
            'max128' => [['entity_type'], 'string', 'max' => 128],

            // Default NULL
            'defaultNull' => [['entity_source_id'], 'default', 'value' => null],
        ];
    }


    /**
     * @return EntityFileQuery The ActiveQuery class for this model
     */
    public static function find() : EntityFileQuery
    {
        return new EntityFileQuery(static::class);
    }


    /**
     * Title used for this model
     */
    public function title() : string
    {
        return $this->entity_uuid;
    }
}

/**
 * These are relations and enum methods generated with Gii.
 * YOU CAN USE THESE METHODS IN THE PARENT MODEL CLASS
 *

   /*
    |--------------------------------------------------------------------------
    | RELATIONS
    |--------------------------------------------------------------------------
    *

    /**
     * @return ActiveQueryInterface The relational query object.
     *
    public function getCreatedUser() : ActiveQueryInterface
    {
        return $this->hasOne(User::class, ['user_id' => 'created_user_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     *
    public function getEntity() : ActiveQueryInterface
    {
        return $this->hasOne(Entity::class, ['entity_uuid' => 'entity_uuid']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     *
    public function getFile() : ActiveQueryInterface
    {
        return $this->hasOne(AssetFile::class, ['file_id' => 'file_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     *
    public function getUpdatedUser() : ActiveQueryInterface
    {
        return $this->hasOne(User::class, ['user_id' => 'updated_user_id']);
    }

*/
