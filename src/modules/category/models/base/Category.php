<?php
/**
 * Base Category model class file
 *
 * @author Fabián Ruiz <fabian@dezero.es>
 * @link http://www.dezero.es
 * @copyright Copyright &copy; 2023 Fabián Ruiz
 */

namespace dezero\modules\category\models\base;

use dezero\modules\category\models\query\CategoryQuery;
use yii\db\ActiveQueryInterface;
use Yii;

/**
 * DO NOT MODIFY THIS FILE! It is automatically generated by Gii.
 * If any changes are necessary, you must set or override the required
 * property or method in class "dezero\modules\category\models\Category".
 *
 * Base Category model class for table "category_category".
 *
 * -------------------------------------------------------------------------
 * COLUMN ATTRIBUTES
 * -------------------------------------------------------------------------
 * @property int $category_id
 * @property string $category_type
 * @property int $category_parent_id
 * @property string $name
 * @property string $description
 * @property int $weight
 * @property int $depth
 * @property int $image_file_id
 * @property string $language_id
 * @property int $category_translated_id
 * @property int $disabled_date
 * @property int $disabled_user_id
 * @property int $created_date
 * @property int $created_user_id
 * @property int $updated_date
 * @property int $updated_user_id
 * @property string $entity_uuid
 *
 * -------------------------------------------------------------------------
 * RELATIONS
 * -------------------------------------------------------------------------
 * @property Category $categoryParent
 * @property Category $categoryTranslated
 * @property UserUser $createdUser
 * @property UserUser $disabledUser
 * @property AssetFile $imageFile
 * @property Language $language
 * @property UserUser $updatedUser
 * @property Category[] $categories
 */
abstract class Category extends \dezero\entity\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName() : string
    {
        return 'category_category';
    }


    /**
     * {@inheritdoc}
     */
    public function rules() : array
    {
        return [
            // Typed rules
            'requiredFields' => [['name'], 'required'],
            'integerFields' => [['category_parent_id', 'weight', 'depth', 'image_file_id', 'category_translated_id', 'disabled_date', 'disabled_user_id', 'created_date', 'created_user_id', 'updated_date', 'updated_user_id'], 'integer'],
            'stringFields' => [['description'], 'string'],
            
            // Max length rules
            'max6' => [['language_id'], 'string', 'max' => 6],
            'max36' => [['entity_uuid'], 'string', 'max' => 36],
            'max128' => [['category_type'], 'string', 'max' => 128],
            'max255' => [['name'], 'string', 'max' => 255],
            
            // Default NULL
            'defaultNull' => [['category_parent_id', 'description', 'image_file_id', 'category_translated_id', 'disabled_date', 'disabled_user_id'], 'default', 'value' => null],
        ];
    }


   /*
    |--------------------------------------------------------------------------
    | RELATIONS
    |--------------------------------------------------------------------------
    */

    /**
     * @return ActiveQueryInterface The relational query object.
     */
    public function getCategoryParent() : ActiveQueryInterface
    {
        return $this->hasOne(Category::class, ['category_id' => 'category_parent_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     */
    public function getCategoryTranslated() : ActiveQueryInterface
    {
        return $this->hasOne(Category::class, ['category_id' => 'category_translated_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     */
    public function getCreatedUser() : ActiveQueryInterface
    {
        return $this->hasOne(UserUser::class, ['user_id' => 'created_user_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     */
    public function getDisabledUser() : ActiveQueryInterface
    {
        return $this->hasOne(UserUser::class, ['user_id' => 'disabled_user_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     */
    public function getImageFile() : ActiveQueryInterface
    {
        return $this->hasOne(AssetFile::class, ['file_id' => 'image_file_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     */
    public function getLanguage() : ActiveQueryInterface
    {
        return $this->hasOne(Language::class, ['language_id' => 'language_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     */
    public function getUpdatedUser() : ActiveQueryInterface
    {
        return $this->hasOne(UserUser::class, ['user_id' => 'updated_user_id']);
    }


    /**
     * @return ActiveQueryInterface The relational query object.
     */
    public function getCategories() : ActiveQueryInterface
    {
        return $this->hasMany(Category::class, ['category_parent_id' => 'category_id']);
    }




    /**
     * @return CategoryQuery The ActiveQuery class for this model
     */
    public static function find() : CategoryQuery
    {
        return new CategoryQuery(static::class);
    }


    /**
     * Title used for this model
     */
    public function title() : string
    {
        return $this->category_type;
    }
}
