<?php
/**
 * @author Fabián Ruiz <fabian@dezero.es>
 * @link http://www.dezero.es
 * @copyright Copyright &copy; 2023 Fabián Ruiz
 */

namespace dezero\grid;

use dezero\helpers\ArrayHelper;
use dezero\helpers\Html;

/**
 * ActionColumn is a column for the [[GridView]] widget that displays buttons for viewing and manipulating the items.
 */
class DataColumn extends \yii\grid\DataColumn
{
    /**
     * @var string|array|Closure in which format should the value of each data model be displayed as (e.g. `"raw"`, `"text"`, `"html"`,
     * `['date', 'php:Y-m-d']`). Supported formats are determined by the [[GridView::formatter|formatter]] used by
     * the [[GridView]]. Default format is "text" which will format the value as an HTML-encoded plain text when
     * [[\yii\i18n\Formatter]] is used as the [[GridView::$formatter|formatter]] of the GridView.
     * @see \yii\i18n\Formatter::format()
     */
    public $format = 'html'; // 'text';


    /**
     * @var array the HTML attributes for the link tag in the header cell
     * generated by [[\yii\data\Sort::link]] when sorting is enabled for this column.
     * @see \yii\helpers\Html::renderTagAttributes() for details on how attributes are being rendered.
     */
    public $sortLinkOptions = [
        'class' => 'sort-link'
    ];


    /**
     * {@inheritdoc}
     */
    public function renderHeaderCell()
    {
        if ( $this->attribute !== null )
        {
            $vec_header_options = ['class' => $this->attribute .'_header'];
            if ( $this->enableSorting )
            {
                $vec_header_options['class'] .= ' sortable';
            }
            $this->headerOptions = ArrayHelper::merge($vec_header_options, $this->headerOptions);
        }

        return parent::renderHeaderCell();
    }


    /**
     * {@inheritdoc}
     */
    public function renderFilterCell()
    {
        if ( $this->attribute !== null )
        {
            $this->filterOptions = ArrayHelper::merge(['class' => $this->filterAttribute .'_filter'], $this->filterOptions);
        }

        return parent::renderFilterCell();
    }


    /**
     * {@inheritdoc}
     */
    public function renderDataCell($model, $key, $index)
    {
        if ( $this->attribute !== null )
        {
            $this->contentOptions = ArrayHelper::merge(['class' => $this->attribute .'_column'], $this->contentOptions);
        }

        return parent::renderDataCell($model, $key, $index);
    }


    /**
     * {@inheritdoc}
     */
    public function renderFooterCell()
    {
        if ( $this->attribute !== null )
        {
            $this->footerOptions = ArrayHelper::merge(['class' => $this->attribute .'_footer'], $this->footerOptions);
        }

        return parent::renderFooterCell();
    }
}
